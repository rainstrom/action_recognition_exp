name: "Predict_Optical_Flow_Net"
layer {
  name: "data"
  type: "VideoSyncFusionData"
  top: "rgb_data"
  top: "flow_data"
  top: "label"
  video_fusion_data_param {
    rgb_root_folder: "ucf101_rgb_img/"
    flow_root_folder: "ucf101_flow_img_tvl1_gpu/"
    source: "dataset_file_examples/train_fusion_split1.txt"
    batch_size: 10
    num_segments: 1
    new_width: 340
    new_height: 256
    modality: FUSION
    # set new_length_rgb and new_length_flow, DO NOT set new_length
    new_length_rgb: 2  # default value is 1
    new_length_flow: 1  # default value is 10
    # set in video_fusion_data_param, not in transform_param
    rgb_mean_value: [104, 117, 123, 104, 117, 123]
    flow_mean_value: [128, 128]
  }
  transform_param{
    mirror: true
    crop_size: 224
    fix_crop: true
    multi_scale: true
    max_distort: 1
    scale_ratios: [1,0.875,0.75]
    # mean_value is set by video_data_param
    # if set mean_value in transform_param, it is invalid
  }
  include: { phase: TRAIN }
}
layer {
  name: "data"
  type: "VideoSyncFusionData"
  top: "rgb_data"
  top: "flow_data"
  top: "label"
  video_fusion_data_param {
    rgb_root_folder: "ucf101_rgb_img/"
    flow_root_folder: "ucf101_flow_img_tvl1_gpu/"
    source: "dataset_file_examples/val_fusion_split1.txt"
    batch_size: 5
    num_segments: 1
    new_width: 340
    new_height: 256
    modality: FUSION
    # set new_length_rgb and new_length_flow, DO NOT set new_length
    new_length_rgb: 2  # default value is 1
    new_length_flow: 1  # default value is 10
    # set in video_fusion_data_param, not in transform_param
    rgb_mean_value: [104, 117, 123, 104, 117, 123]
    flow_mean_value: [128, 128]

    # full_test only work in TEST mode and full_test muse be set to true
    full_test: false
    full_test_param {
      is_mirror: false
      is_crop: false
      full_test_num_segments: 1
      # in full test mode, you must set test_batch_size and batch_size is invalid
      test_batch_size: 1
    }
  }
  transform_param{
    crop_size: 224
    mirror: false
    # mean_value is set by video_data_param
    # if set mean_value in transform_param, it is invalid
  }
  include: { phase: TEST }
}

layer {
  name: "reshape"
  type: "Reshape"
  bottom: "rgb_data"
  top: "reshape_rgb_data"
  reshape_param {
    shape {
      dim: -1
      dim: 3
      dim: 0
      dim: 0
    }
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "reshape_rgb_data"
  top: "conv1_1"
  param {
    name: "conv1_1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    name: "conv1_2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    name: "conv2_1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    name: "conv2_2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    name: "conv3_1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    name: "conv3_2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    name: "conv3_3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    name: "conv4_1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    name: "conv4_2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    name: "conv4_3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    name: "conv5_1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    name: "conv5_2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    name: "conv5_3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5_3"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "reshape"
  type: "Reshape"
  bottom: "pool5"
  top: "reshape_pool5"
  reshape_param {
    shape {
      dim: -1
      dim: 1024
      dim: 0
      dim: 0
    }
  }
  propagate_down: false
}

# layer {
#   name: "slicer"
#   type: "Slice"
#   bottom: "reshape_pool5"
#   top: "pool5_p0"
#   top: "pool5_p1"
#   slice_param {
#     axis: 1
#     slice_point: 512
#   }
# }

# layer {
#   name: "mean"
#   type: "Eltwise"
#   bottom: "pool5_p0"
#   bottom: "pool5_p1"
#   top: "pool5_mean"
#   eltwise_param {
#     operation: SUM
#     coeff: [0.5, 0.5]
#   }
# }


# layer {
#   name: "fc6"
#   type: "InnerProduct"
#   bottom: "pool5_mean"
#   top: "fc6"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   param {
#     lr_mult: 2
#     decay_mult: 0
#   }
#   inner_product_param {
#     num_output: 4096
#   }
# }
# layer {
#   name: "relu6"
#   type: "ReLU"
#   bottom: "fc6"
#   top: "fc6"
# }
# layer {
#   name: "drop6"
#   type: "Dropout"
#   bottom: "fc6"
#   top: "fc6"
#   dropout_param {
#     dropout_ratio: 0.9
#   }
# }
# layer {
#   name: "fc7"
#   type: "InnerProduct"
#   bottom: "fc6"
#   top: "fc7"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   param {
#     lr_mult: 2
#     decay_mult: 0
#   }
#   inner_product_param {
#     num_output: 4096
#   }
# }
# layer {
#   name: "relu7"
#   type: "ReLU"
#   bottom: "fc7"
#   top: "fc7"
# }
# layer {
#   name: "drop7"
#   type: "Dropout"
#   bottom: "fc7"
#   top: "fc7"
#   dropout_param {
#     dropout_ratio: 0.8
#   }
# }
# layer {
#   name: "fc8_rgb"
#   type: "InnerProduct"
#   bottom: "fc7"
#   top: "fc8"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   param {
#     lr_mult: 2
#     decay_mult: 0
#   }
#   inner_product_param {
#     num_output: 101
#     weight_filler {
#       type: "gaussian"
#       std: 0.001
#     }
#     bias_filler {
#       type: "constant"
#       value: 0
#     }
#   }
# }
# layer {
#   name: "loss"
#   type: "SoftmaxWithLoss"
#   bottom: "fc8"
#   bottom: "label"
#   include {
#     phase: TRAIN
#   }
# }
# layer {
#   name: "loss"
#   type: "SoftmaxWithLoss"
#   bottom: "fc8"
#   bottom: "label"
#   top: "loss"
#   include {
#     phase: TEST
#   }
# }
# layer {
#   name: "accuracy"
#   type: "Accuracy"
#   bottom: "fc8"
#   bottom: "label"
#   top: "accuracy"
#   include {
#     phase: TEST
#   }
# }

layer {
  name: "fcn_fc6"
  type: "Convolution"
  bottom: "reshape_pool5"
  top: "fcn_fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    num_output: 1024
    pad: 0
    kernel_size: 1
  }
}

layer {
  name: "fcn_relu6"
  type: "ReLU"
  bottom: "fcn_fc6"
  top: "fcn_fc6"
}


layer {
  name: "fcn_fc7"
  type: "Convolution"
  bottom: "fcn_fc6"
  top: "fcn_fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    num_output: 1024
    pad: 0
    kernel_size: 1
  }
}

layer {
  name: "fcn_relu7"
  type: "ReLU"
  bottom: "fcn_fc7"
  top: "fcn_fc7"
}

layer {
  name: "fcn_fc8"
  type: "Convolution"
  bottom: "fcn_fc7"
  top: "fcn_fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    num_output: 2
    pad: 0
    kernel_size: 1
  }
}


layer {
  name: "pool_flow"
  type: "Pooling"
  bottom: "flow_data"
  top: "flow_label"
  pooling_param {
    pool: AVE
    kernel_size: 32
    stride: 32
  }
}

layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "fcn_fc8"
  bottom: "flow_label"
  include {
    phase: TRAIN
  }
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "fcn_fc8"
  bottom: "flow_label"
  top: "loss"
  include {
    phase: TEST
  }
}

layer {
  name: "slience_label"
  type: "Silence"
  bottom: "label"
}

